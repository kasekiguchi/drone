% Produced by CVXGEN, 2024-07-23 04:29:25 -0400.
% CVXGEN is Copyright (C) 2006-2017 Jacob Mattingley, jem@cvxgen.com.
% The code in this file is Copyright (C) 2006-2017 Jacob Mattingley.
% CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial
% applications without prior written permission from Jacob Mattingley.

% Filename: cvxsolve.m.
% Description: Solution file, via cvx, for use with sample.m.
function [vars, status] = cvxsolve(params, settings)
A = params.A;
B1 = params.B1;
B2 = params.B2;
Q = params.Q;
R1 = params.R1;
R2 = params.R2;
x_0 = params.x_0;
cvx_begin
  % Caution: automatically generated by cvxgen. May be incorrect.
  variable u_th_0;
  variable u_tr_0(3, 1);
  variable x_1(12, 1);
  variable u_th_1;
  variable u_tr_1(3, 1);
  variable x_2(12, 1);
  variable u_th_2;
  variable u_tr_2(3, 1);
  variable x_3(12, 1);
  variable u_th_3;
  variable u_tr_3(3, 1);
  variable x_4(12, 1);
  variable u_th_4;
  variable u_tr_4(3, 1);
  variable x_5(12, 1);
  variable u_th_5;
  variable u_tr_5(3, 1);
  variable x_6(12, 1);
  variable u_th_6;
  variable u_tr_6(3, 1);
  variable x_7(12, 1);
  variable u_th_7;
  variable u_tr_7(3, 1);
  variable x_8(12, 1);
  variable u_th_8;
  variable u_tr_8(3, 1);
  variable x_9(12, 1);
  variable u_th_9;
  variable u_tr_9(3, 1);
  variable x_10(12, 1);
  variable u_th_10;
  variable u_tr_10(3, 1);
  variable x_11(12, 1);

  minimize(quad_form(x_0, Q) + quad_form(u_th_0, R1) + quad_form(u_tr_0, R2) + quad_form(x_1, Q) + quad_form(u_th_1, R1) + quad_form(u_tr_1, R2) + quad_form(x_2, Q) + quad_form(u_th_2, R1) + quad_form(u_tr_2, R2) + quad_form(x_3, Q) + quad_form(u_th_3, R1) + quad_form(u_tr_3, R2) + quad_form(x_4, Q) + quad_form(u_th_4, R1) + quad_form(u_tr_4, R2) + quad_form(x_5, Q) + quad_form(u_th_5, R1) + quad_form(u_tr_5, R2) + quad_form(x_6, Q) + quad_form(u_th_6, R1) + quad_form(u_tr_6, R2) + quad_form(x_7, Q) + quad_form(u_th_7, R1) + quad_form(u_tr_7, R2) + quad_form(x_8, Q) + quad_form(u_th_8, R1) + quad_form(u_tr_8, R2) + quad_form(x_9, Q) + quad_form(u_th_9, R1) + quad_form(u_tr_9, R2) + quad_form(x_10, Q) + quad_form(u_th_10, R1) + quad_form(u_tr_10, R2));
  subject to
    x_1 == A*x_0 + B1*u_th_0 + B2*u_tr_0;
    x_2 == A*x_1 + B1*u_th_1 + B2*u_tr_1;
    x_3 == A*x_2 + B1*u_th_2 + B2*u_tr_2;
    x_4 == A*x_3 + B1*u_th_3 + B2*u_tr_3;
    x_5 == A*x_4 + B1*u_th_4 + B2*u_tr_4;
    x_6 == A*x_5 + B1*u_th_5 + B2*u_tr_5;
    x_7 == A*x_6 + B1*u_th_6 + B2*u_tr_6;
    x_8 == A*x_7 + B1*u_th_7 + B2*u_tr_7;
    x_9 == A*x_8 + B1*u_th_8 + B2*u_tr_8;
    x_10 == A*x_9 + B1*u_th_9 + B2*u_tr_9;
    x_11 == A*x_10 + B1*u_th_10 + B2*u_tr_10;
    0 <= u_th_0;
    0 <= u_th_1;
    0 <= u_th_2;
    0 <= u_th_3;
    0 <= u_th_4;
    0 <= u_th_5;
    0 <= u_th_6;
    0 <= u_th_7;
    0 <= u_th_8;
    0 <= u_th_9;
    0 <= u_th_10;
    u_th_0 <= 10;
    u_th_1 <= 10;
    u_th_2 <= 10;
    u_th_3 <= 10;
    u_th_4 <= 10;
    u_th_5 <= 10;
    u_th_6 <= 10;
    u_th_7 <= 10;
    u_th_8 <= 10;
    u_th_9 <= 10;
    u_th_10 <= 10;
    -1 <= u_tr_0;
    -1 <= u_tr_1;
    -1 <= u_tr_2;
    -1 <= u_tr_3;
    -1 <= u_tr_4;
    -1 <= u_tr_5;
    -1 <= u_tr_6;
    -1 <= u_tr_7;
    -1 <= u_tr_8;
    -1 <= u_tr_9;
    -1 <= u_tr_10;
    u_tr_0 <= 1;
    u_tr_1 <= 1;
    u_tr_2 <= 1;
    u_tr_3 <= 1;
    u_tr_4 <= 1;
    u_tr_5 <= 1;
    u_tr_6 <= 1;
    u_tr_7 <= 1;
    u_tr_8 <= 1;
    u_tr_9 <= 1;
    u_tr_10 <= 1;
cvx_end
vars.u_th_0 = u_th_0;
vars.u_th_1 = u_th_1;
vars.u_th{1} = u_th_1;
vars.u_th_2 = u_th_2;
vars.u_th{2} = u_th_2;
vars.u_th_3 = u_th_3;
vars.u_th{3} = u_th_3;
vars.u_th_4 = u_th_4;
vars.u_th{4} = u_th_4;
vars.u_th_5 = u_th_5;
vars.u_th{5} = u_th_5;
vars.u_th_6 = u_th_6;
vars.u_th{6} = u_th_6;
vars.u_th_7 = u_th_7;
vars.u_th{7} = u_th_7;
vars.u_th_8 = u_th_8;
vars.u_th{8} = u_th_8;
vars.u_th_9 = u_th_9;
vars.u_th{9} = u_th_9;
vars.u_th_10 = u_th_10;
vars.u_th{10} = u_th_10;
vars.u_tr_0 = u_tr_0;
vars.u_tr_1 = u_tr_1;
vars.u_tr{1} = u_tr_1;
vars.u_tr_2 = u_tr_2;
vars.u_tr{2} = u_tr_2;
vars.u_tr_3 = u_tr_3;
vars.u_tr{3} = u_tr_3;
vars.u_tr_4 = u_tr_4;
vars.u_tr{4} = u_tr_4;
vars.u_tr_5 = u_tr_5;
vars.u_tr{5} = u_tr_5;
vars.u_tr_6 = u_tr_6;
vars.u_tr{6} = u_tr_6;
vars.u_tr_7 = u_tr_7;
vars.u_tr{7} = u_tr_7;
vars.u_tr_8 = u_tr_8;
vars.u_tr{8} = u_tr_8;
vars.u_tr_9 = u_tr_9;
vars.u_tr{9} = u_tr_9;
vars.u_tr_10 = u_tr_10;
vars.u_tr{10} = u_tr_10;
vars.x_1 = x_1;
vars.x{1} = x_1;
vars.x_2 = x_2;
vars.x{2} = x_2;
vars.x_3 = x_3;
vars.x{3} = x_3;
vars.x_4 = x_4;
vars.x{4} = x_4;
vars.x_5 = x_5;
vars.x{5} = x_5;
vars.x_6 = x_6;
vars.x{6} = x_6;
vars.x_7 = x_7;
vars.x{7} = x_7;
vars.x_8 = x_8;
vars.x{8} = x_8;
vars.x_9 = x_9;
vars.x{9} = x_9;
vars.x_10 = x_10;
vars.x{10} = x_10;
vars.x_11 = x_11;
vars.x{11} = x_11;
status.cvx_status = cvx_status;
% Provide a drop-in replacement for csolve.
status.optval = cvx_optval;
status.converged = strcmp(cvx_status, 'Solved');
