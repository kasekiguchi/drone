function q = Eul2Quat(in1)
% convert euler angle (roll-pitch-yaw angle) to quaternion
% 【Input】 eul : euler angle
% 【Output】q : quaternion

%    This function was generated by the Symbolic Math Toolbox version 9.3.
%    2023/06/21 11:09:07
% % algorithm
% % syms eul [3 1] real
% % phi = eul(1)/2;
% % th  = eul(2)/2;
% % psi = eul(3)/2;
% % q0 = cos(phi)*cos(th)*cos(psi) + sin(phi)*sin(th)*sin(psi);
% % q1 = sin(phi)*cos(th)*cos(psi) - cos(phi)*sin(th)*sin(psi);
% % q2 = cos(phi)*sin(th)*cos(psi) + sin(phi)*cos(th)*sin(psi);
% % q3 = cos(phi)*cos(th)*sin(psi) - sin(phi)*sin(th)*cos(psi);
% % % Normalize quaternion
% % tmp = sqrt(q0.^2 + q1.^2 + q2.^2 + q3.^2);
% % q0 = q0/tmp;
% % q1 = q1/tmp;
% % q2 = q2/tmp;
% % q3 = q3/tmp;
% % q = [q0; q1; q2; q3];
% % matlabFunction(q,"vars",{eul},"file","tmp.m")


eul1 = in1(1,:);
eul2 = in1(2,:);
eul3 = in1(3,:);
t2 = eul1./2.0;
t3 = eul2./2.0;
t4 = eul3./2.0;
t5 = cos(t2);
t6 = cos(t3);
t7 = cos(t4);
t8 = sin(t2);
t9 = sin(t3);
t10 = sin(t4);
t11 = t8.*t9.*t10;
t12 = t5.*t6.*t7;
t13 = t5.*t6.*t10;
t14 = t5.*t7.*t9;
t15 = t6.*t7.*t8;
t16 = t5.*t9.*t10;
t17 = t6.*t8.*t10;
t18 = t7.*t8.*t9;
t19 = -t16;
t20 = -t18;
t21 = t11+t12;
t22 = t14+t17;
t23 = t13+t20;
t24 = t15+t19;
t25 = t21.^2;
t26 = t22.^2;
t27 = t23.^2;
t28 = t24.^2;
t29 = t25+t26+t27+t28;
t30 = 1.0./sqrt(t29);
q = [t21.*t30;t24.*t30;t22.*t30;t23.*t30];
end
